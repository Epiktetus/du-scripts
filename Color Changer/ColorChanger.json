--old
{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"looptime = 0.5 --export: Seconds between color changes\ndebug = false --export: Spams your console with too much info\n\nRedStart = 0 --export: Where this color starts (0 is black, 255 is 100%)\nRedSpeed = 255 --export: How much this color changes each loop\nRedRandom = 0 --export: A random number (up to this) to add or subtract to this color.\nRedRev = false --export: If True color reverses when it reaches the end instead of starting over\n\nGreenStart = 0 --export: Where this color starts (0 is black, 255 is 100%)\nGreenSpeed = 255 --export: How much this color changes each loop\nGreenRandom = 0 --export: A random number (up to this) to add or subtract to this color.\nGreenRev = false --export: If True color reverses when it reaches the end instead of starting over\n\nBlueStart = 0 --export: Where this color starts (0 is black, 255 is 100%)\nBlueSpeed = 255 --export: How much this color changes each loop\nBlueRandom = 0 --export: A random number (up to this) to add or subtract to this color.\nBlueRev = false --export: If True color reverses when it reaches the end instead of starting over\n\nAllColorRandom = 0 --export: A random number (up to this) to add or subtract to all colors. Good for keeping colors in sync with each other.\nLoopRandom = 0.5 --export: A random number (up to this) to add or subtract to the loop delay.\n\n-- Configuration ends here\n\nR = RedStart\nG = GreenStart\nB = BlueStart\n\nLights = findElements(\"LightUnit\")\nLightCount = tableLen(Lights)\n\nif LightCount < 1 then\n    system.print(\"Link lights to this PB before activating\")\n    unit.exit()\nend\n\nif LoopRandom > looptime then\n    system.print(\"LoopRandom cannot be greater than looptime\")\n    unit.exit()\nend\n\nif debug then\n    system.print(\"Found \" .. LightCount .. \" lights\")\nend\n\nfor i = 1, LightCount do\n    Lights[i].activate()\n    Lights[i].setRGBColor(R, G, B)\n    if debug then system.print(\"Light \"..i..\" activated and set to : \"..R..\",\"..G..\",\"..B) end\nend\n\nunit.hide()\n\nunit.setTimer(\"loop\", looptime)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"for i = 1, LightCount do\n    Lights[i].deactivate()\n    Lights[i].setRGBColor(0,0,0)\nend","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"TotalRandom = myRand(AllColorRandom)\n\nR = R + RedSpeed + myRand(RedRandom) + TotalRandom\nG = G + GreenSpeed + myRand(GreenRandom) + TotalRandom\nB = B + BlueSpeed + myRand(BlueRandom) + TotalRandom\n\nR,RedSpeed = cleanColor(R, RedSpeed, RedRev)\nG,GreenSpeed = cleanColor(G, GreenSpeed, GreenRev)\nB,BlueSpeed = cleanColor(B, BlueSpeed, BlueRev)\n\nfor i = 1, LightCount do\n\tif debug then system.print(\"Light \"..i..\" set to : \"..R..\",\"..G..\",\"..B) end\n\tLights[i].setRGBColor(R, G, B)\nend\n\nif LoopRandom > 0 then\n\tunit.setTimer(\"loop\", looptime + myRand(LoopRandom))\nend ","filter":{"args":[{"value":"loop"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"function findElements(ClassName)\n    local FoundElements = {}\n    for key, value in pairs(unit) do\n        if type(value) == \"table\" and type(value.export) == \"table\" then\n            if value.getElementClass then\n                if value.getElementClass() == ClassName then\n                    table.insert(FoundElements, value)\n                end\n            end\n        end\n    end\n    return FoundElements\nend\n\nfunction cleanColor(C, ColorSpeed, ColorRev)\n    C = math.floor(C)\n    if C > 255 then\n        if ColorRev then\n            C = 255\n            ColorSpeed = ColorSpeed * -1\n        else\n            C = 0\n        end\n    end\n    if C < 0 then\n        if ColorRev then\n            C = 0\n            ColorSpeed = ColorSpeed * -1\n        else\n            C = 255\n        end\n    end\n    return C,ColorSpeed\nend\n\nfunction myRand(max)\n    x = math.random()\n    x = (x*(max * 2))-max\n    return x\nend\n\nfunction tableLen(T)\n    local count = 0\n    for _ in pairs(T) do\n        count = count + 1\n    end\n    return count\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"}],"methods":[],"events":[]}